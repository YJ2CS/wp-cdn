#-----------------add_header 增加http头---------------------
# 仅当当前层级中没有add_header指令才会继承父级设置。所以我的疑问就清晰了：location中有add_header，nginx.conf中的配置被丢弃了。
# 这是Nginx的故意行为，说不上是bug或坑。但深入体会这句话，会发现更有意思的现象：
# 仅最近一处的add_header起作用。http、server和location三处均可配置add_header，
# 但起作用的是最接近的配置，往上的配置都会失效。

#------------------强制HTTPS访问----------------------------------
# 它告诉浏览器只能通过HTTPS访问当前资源，而不是HTTP
# add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
#------------------强制HTTPS访问 END----------------------------------

# ------------------------增加缓存控制header--------------------
# 设置cache的过期时间，以及是否要在浏览器中缓存
# 当使用max-age = 0时，浏览器在后退/前进时查看资源时将使用最新版本。
# 如果使用no-cache，将重新获取资源。
# 类似地，当通过https使用无缓存时，IE 8会遇到各种各样的“无法下载”问题。建议的解决方案有时包括将标头更改为 max-age = 0
# max-age>0时 直接从游览器缓存中提取;
# max-age<=0 时向server发送http请求确认 ,该资源是否有修改, 有的话 返回200 , 无的话 返回304。
# 更多说明请见： https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control
#-------------------------------------------------------------

# 对于动态页面，应该这么设置(如未作任何缓存处理的.php页面)
#add_header Cache-Control max-age=0;

# 缓存静态资源、伪静态资源，
# 真正静态的资源如html,js,css,imgs, 伪静态资源如使用fastcgi cache之后得到的静态缓存文件
# 因为fastcgi cache就是让动态网页静态化，缓存在服务器上，等待用户请求动态网页时，直接将静态网页返还给用户，
# 应当设置成：静态网页、伪静态在用户的浏览器这边不做缓存，每次都需要到服务器获取最新的静态网页缓存。
add_header Cache-Control "no-cache, must-revalidate, max-age=0";


# 对于图像，CSS文件和JavaScript文件。一般配合Expires使用
# 这些属于网页中不会改变的文件，即网页提供的静态文件，你通常可以在发送响应头前添加积极缓存
# add_header Cache-Control "max-age=31536000,public";
# ------------------------增加缓存控制header END--------------------

# -----------------Nginx-Cache提醒------------------
# 三款选择一个，其余注释
add_header X-Cache "$upstream_cache_status  From $host";
# add_header Nginx-Cache "$upstream_cache_status";
# add_header rt-Fastcgi-Cache "$upstream_cache_status From $host";
# -----------------Nginx-Cache提醒 END------------------

#-------------缓存时间戳设置---------------------
# 添加检测proxy cache需要的Age
add_header X-Cache-Date $date_gmt;
# 最后修改时间，时间戳，用来验证缓存
add_header Last-Modified $date_gmt;
#-------------缓存时间戳设置 END---------------------

#----------站点防盗设置-----------------------
# 只允许本站用 frame 来嵌套
add_header X-Frame-Options SAMEORIGIN;
# 禁止嗅探文件类型
add_header X-Content-Type-Options nosniff;
# XSS 保护
add_header X-XSS-Protection "1; mode=block";
#----------站点防盗设置 END-----------------------


#---------------预检请求设置-----------------------------

#------------------预检请求的缓存时间设置----------------------
# Access-Control-Max-Age 指令
# see: https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age
# 这个响应头表示 preflight request （预检请求）的返回结果（即 Access-Control-Allow-Methods 和Access-Control-Allow-Headers 提供的信息） 可以被缓存多久。
#  <delta-seconds>
#  返回结果可以被缓存的最长时间（秒）。
#  在 Firefox 中，上限是24小时 （即 86400 秒）。
#  在 Chromium v76 之前， 上限是 10 分钟（即 600 秒)。
#  从 Chromium v76 开始，上限是 2 小时（即 7200 秒)。
#  Chromium 同时规定了一个默认值 5 秒。
#  如果值为 -1，表示禁用缓存，则每次请求前都需要使用 OPTIONS 预检请求。
#add_header Access-Control-Max-Age 7200;
#------------------预检请求的缓存时间设置 END----------------------

# 指定了该响应的资源是否被允许与给定的origin共享。
# * 对于不需具备凭证（credentials）的请求，服务器会以“*”作为通配符，从而允许所有域都具有访问资源的权限。
#add_header Access-Control-Allow-Origin *;
#add_header Access-Control-Allow-Headers X-Requested-With,content-type;
#add_header Access-Control-Allow-Methods GET,POST; #,OPTIONS;

#---------------预检请求设置 END-----------------------------

#-----------------add_header 增加http头 END---------------------
